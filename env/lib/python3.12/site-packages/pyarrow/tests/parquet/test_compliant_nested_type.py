
import pytest

import pyarrow as pa

try:
    import pyarrow.parquet as pq
    from pyarrow.tests.parquet.common import (_read_table,
                                              _check_roundtrip)
except ImportError:
    pq = None

try:
    import pandas as pd
    import pandas.testing as tm

    from pyarrow.tests.parquet.common import _roundtrip_pandas_dataframe
except ImportError:
    pd = tm = None


pytestmark = pytest.mark.parquet


_test_data_simple = [
    {'items': [1, 2]},
    {'items': [0]},
]

_test_data_complex = [
    {'items': [{'name': 'elem1', 'value': '1'},
               {'name': 'elem2', 'value': '2'}]},
    {'items': [{'name': 'elem1', 'value': '0'}]},
]

parametrize_test_data = pytest.mark.parametrize(
    "test_data", [_test_data_simple, _test_data_complex])


@pytest.mark.pandas
@parametrize_test_data
def test_write_compliant_nested_type_enable(tempdir, test_data):
    df = pd.DataFrame(data=test_data)
    _roundtrip_pandas_dataframe(df,
                                write_kwargs={})

    table = pa.Table.from_pandas(df, preserve_index=False)
    path = str(tempdir / 'data.parquet')
    with pq.ParquetWriter(path, table.schema,
                          version='2.6') as writer:
        writer.write_table(table)
    new_table = _read_table(path)
    assert isinstance(new_table.schema.types[0], pa.ListType)
    assert new_table.schema.types[0].value_field.name == 'element'

    _check_roundtrip(new_table)


@pytest.mark.pandas
@parametrize_test_data
def test_write_compliant_nested_type_disable(tempdir, test_data):
    df = pd.DataFrame(data=test_data)
    _roundtrip_pandas_dataframe(df, write_kwargs={
        'use_compliant_nested_type': False})

    table = pa.Table.from_pandas(df, preserve_index=False)
    path = str(tempdir / 'data.parquet')
    with pq.ParquetWriter(path, table.schema, version='2.6',
                          use_compliant_nested_type=False) as writer:
        writer.write_table(table)
    new_table = _read_table(path)

    assert isinstance(new_table.schema.types[0], pa.ListType)
    assert new_table.schema.types[0].value_field.name == 'item'

    _check_roundtrip(new_table,
                     use_compliant_nested_type=False)
